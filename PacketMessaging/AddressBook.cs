//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Windows.Storage;
using MetroLog;
using System.Collections.ObjectModel;
using System.Linq;

// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 

namespace PacketMessaging
{

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
	//[System.SerializableAttribute()]
	//[System.Diagnostics.DebuggerStepThroughAttribute()]
	//[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlType(AnonymousType = true)]
	[XmlRoot(Namespace = "", IsNullable = false)]
    public sealed class AddressBook
	{
        private static ILogger log = LogManagerFactory.DefaultLogManager.GetLogger<BBSDefinitions>();

        private Dictionary<string, AddressBookEntry> _addressDictionary;
        private const string addressBookFileName = "addressBook.xml";
        private AddressBook _userAddressBook;

        private AddressBookEntry[] _addressEntriesField;

        private static volatile AddressBook _instance;
        private static object _syncRoot = new Object();


        /// <remarks/>
        [XmlElement("AddressEntry")]
		public AddressBookEntry[] AddressEntries
		{
			get
			{
				return this._addressEntriesField;
			}
			set
			{
				this._addressEntriesField = value;
			}
		}

        public static AddressBook Instance
        {
            get
            {
                if (_instance == null)
                {
                    lock (_syncRoot)
                    {
                        if (_instance == null)
                            _instance = new AddressBook();
                    }
                }

                return _instance;
            }
        }

        public async Task OpenAsync()
        {
            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            try
            {
                var storageItem = await localFolder.TryGetItemAsync(addressBookFileName);
                if (storageItem == null)
                    return;

                StorageFile file = await localFolder.GetFileAsync(addressBookFileName);
                using (FileStream reader = new FileStream(file.Path, FileMode.Open))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(AddressBook));
                    _userAddressBook = (AddressBook)serializer.Deserialize(reader);
                }
            }
            catch (FileNotFoundException e)
            {
                log.Error($"Open Address Book file failed: {e.Message}");
            }
            catch (Exception e)
            {
                log.Error($"Error opening {e.Message} {e}");
            }
        }


        public async void SaveAsync()
        {
            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            try
            {
                StorageFile file = await localFolder.CreateFileAsync(addressBookFileName, CreationCollisionOption.ReplaceExisting);
                using (StreamWriter writer = new StreamWriter(new FileStream(file.Path, FileMode.OpenOrCreate)))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(AddressBook));
                    serializer.Serialize(writer, _userAddressBook);
                }
            }
            catch (Exception e)
            {
                log.Error($"Error saving {addressBookFileName} {e}");
            }
        }

        public void CreateAddressBook()
        {
            _addressDictionary = new Dictionary<string, AddressBookEntry>();
            foreach (var tacticalCallsignData in App._tacticalCallsignDataDictionary.Values)
            {
				if (tacticalCallsignData.TacticalCallsigns == null)
					continue;

                foreach (TacticalCall tacticalCall in tacticalCallsignData.TacticalCallsigns.TacticalCallsignsArray)
                {
                    AddressBookEntry entry = new AddressBookEntry()
                    {
                        Callsign = tacticalCall.TacticalCallsign.ToUpper(),
                        NameDetail = tacticalCall.AgencyName,
                        BBSPrimary = tacticalCall.PrimaryBBS,
                        BBSSecondary = tacticalCall.SecondaryBBS,
                        BBSPrimaryActive = tacticalCall.PrimaryBBSActive
                    };
                    if (tacticalCall.SecondaryBBS.Length == 0 && tacticalCall.SecondaryBBSActive)
                    {
                        tacticalCall.PrimaryBBSActive = true;
                        tacticalCall.SecondaryBBSActive = false;
                    }

                    string activeBBS = tacticalCall.PrimaryBBSActive ? tacticalCall.PrimaryBBS : tacticalCall.SecondaryBBS;
                    _addressDictionary.TryGetValue(entry.Callsign, out AddressBookEntry newEntry);
                    if (newEntry == null)
                    {
                        _addressDictionary.Add(entry.Callsign, entry);
                    }
                }
            }
            // Add user address book
            if (_userAddressBook != null && _userAddressBook.AddressEntries != null)
            {
                foreach (var entry in _userAddressBook.AddressEntries)
                {
                    _addressDictionary.Add(entry.Callsign, entry);
                }
            }
        }

        //public static void UpdateEntry(TacticalCall tacticalCall)
        //{
        //    AddressBookEntry entry = _addresBook[tacticalCall.TacticalCallsign];
        //    string activeBBS = tacticalCall.PrimaryBBSActive ? tacticalCall.PrimaryBBS : tacticalCall.SecondaryBBS;
        //    //entry.Address = entry.Callsign + '@' + activeBBS + ".ampr.org";
        //}

        public string GetAddress(string callsign)
        {
            _addressDictionary.TryGetValue(callsign.ToUpper(), out AddressBookEntry entry);

            return (entry == null ? callsign : entry.Address);
        }

        private bool ValidateBBS(string bbs)
        {
            string bbsStringIndex = bbs.Substring(1, 1);
            int BBSIndex = Convert.ToInt32(bbsStringIndex);
            if (bbs.StartsWith("w") && bbs.EndsWith("xsc") && BBSIndex > 0 && BBSIndex < 6)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool AddAddressAsync(AddressBookEntry addressBookEntry)
        {
            // Validate entries
            int index = addressBookEntry.Address.IndexOf('@');
            if (index < 0)
                return false;

            _addressDictionary.TryGetValue(addressBookEntry.Callsign, out AddressBookEntry oldAddressBookEntry);
            if (oldAddressBookEntry != null)
            {
                string temp = addressBookEntry.Address.Substring(index + 1);
                temp = temp.ToLower();
                index = temp.IndexOf('.');
                if (index < 0)
                    return false;

                temp = temp.Substring(0, index);
                bool result = ValidateBBS(temp);        // BBS in address
                result &= ValidateBBS(addressBookEntry.BBSPrimary.ToLower());       // Primary BBS
                //result &= ValidateBBS(addressBookEntry.BBSSecondary.ToLower());     // Secondary BBS can be undefined
                if (!result)
                    return false;

                AddressBookEntry entry = new AddressBookEntry()
                {
                    Callsign = addressBookEntry.Callsign,
                    NameDetail = addressBookEntry.NameDetail,
                    BBSPrimary = addressBookEntry.BBSPrimary,
                    BBSSecondary = addressBookEntry.BBSSecondary,
                    BBSPrimaryActive = addressBookEntry.BBSPrimaryActive
                };
                _addressDictionary.Remove(entry.Callsign);
                _addressDictionary.Add(entry.Callsign, entry);
                // Insert in userAddressBook
                if (_userAddressBook.AddressEntries == null)
                {
                    AddressBookEntry[] addressEntries = new AddressBookEntry[0];
                    //_userAddressBook = new AddressBook()
                    //{
                    _userAddressBook.AddressEntries = addressEntries;
                    //};
                }
                var addressBookEntryList = _userAddressBook.AddressEntries.ToList();
                addressBookEntryList.Add(entry);
                _userAddressBook.AddressEntries = addressBookEntryList.ToArray();
                SaveAsync();
            }
            return true;
        }

        public void AddAddressAsync(string address, string bbsPrimary = "", string bbsSecondary = "", bool primaryActive = true)
        {
            // extract callsign
            int index = address.IndexOf('@');
			if (index < 0)
				return;

			string callsign = address.Substring(0, index);
            _addressDictionary.TryGetValue(callsign, out AddressBookEntry addressBookEntry);
            if (addressBookEntry == null)
            {
                string temp = address.Substring(index + 1);
                temp = temp.ToLower();
                index = temp.IndexOf('.');
				if (index < 0)
					return;

				temp = temp.Substring(0, index);
                if (temp.StartsWith("w") && temp.EndsWith("xsc"))
                {
                    bbsPrimary = temp;
                }
                AddressBookEntry entry = new AddressBookEntry()
                {
                    Callsign = callsign,
                    NameDetail = address,
                    BBSPrimary = bbsPrimary,
                    BBSSecondary = bbsPrimary,
                    BBSPrimaryActive = primaryActive
                };
                _addressDictionary.Add(callsign, entry);
                // Insert in userAddressBook
                if (_userAddressBook == null)
                {
                    AddressBookEntry[] addressEntries = new AddressBookEntry[1];
                    _userAddressBook = new AddressBook()
                    {
                        AddressEntries = addressEntries
                    };                
                }
                var addressBookEntryList = _userAddressBook.AddressEntries.ToList();
                addressBookEntryList.Add(entry);
                _userAddressBook.AddressEntries = addressBookEntryList.ToArray();
                SaveAsync();
            }
        }

        public void DeleteAddress(AddressBookEntry addressBookEntry)
        {
            var addressBookEntryList = _userAddressBook?.AddressEntries.ToList();
            addressBookEntryList?.Remove(addressBookEntry);
            _userAddressBook.AddressEntries = addressBookEntryList.ToArray();
            SaveAsync();
        }

        public ObservableCollection<AddressBookEntry> GetContacts()
        {
            ObservableCollection<AddressBookEntry> contacts = new ObservableCollection<AddressBookEntry>();

            foreach (AddressBookEntry entry in _addressDictionary.Values)
            {
                contacts.Add(entry);
            }
            return contacts;
        }
        public ObservableCollection<GroupInfoList> GetContactsGrouped()
        {
            ObservableCollection<GroupInfoList> groups = new ObservableCollection<GroupInfoList>();

            var query = from item in GetContacts()
                        group item by item.Callsign.Substring(0, 1) into g
                        orderby g.Key
                        select new { GroupName = g.Key, Items = g };

            foreach (var g in query)
            {
                GroupInfoList info = new GroupInfoList();
                info.Key = g.GroupName;
                foreach (var item in g.Items)
                {
                    info.Add(item);
                }
                info.Sort();
                groups.Add(info);
            }

            return groups;
        }

    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    //[System.SerializableAttribute()]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //[XmlType(AnonymousType = true)]
    public partial class AddressBookEntry : IComparable
    {
        private string callsignField;

        private string nameField;

        private string bBSPrimaryField;

        private string bBSSecondaryField;

        private bool bbsPrimaryActiveField = true;

        /// <remarks/>
        [XmlAttribute()]
        public string Callsign
        {
            get
            {
                return this.callsignField;
            }
            set
            {
                this.callsignField = value;
            }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string NameDetail
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }


        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string BBSPrimary
        {
            get
            {
                return this.bBSPrimaryField;
            }
            set
            {
                this.bBSPrimaryField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string BBSSecondary
        {
            get
            {
                return this.bBSSecondaryField;
            }
            set
            {
                this.bBSSecondaryField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool BBSPrimaryActive
        {
            get
            {
                return this.bbsPrimaryActiveField;
            }
            set
            {
                this.bbsPrimaryActiveField = value;

                //AddressBook._addresBook.TryGetValue(Callsign, out AddressBookEntry entry);
                //if (entry != null)
                //{
                //    AddressBook._addresBook[Callsign].bbsPrimaryActiveField = value;
                //    //ContactsCVS.Source = AddressBook.GetContactsGrouped();
                //}
            }
        }

        public string Address
        {
            get
            {
                string retval;
                if (BBSPrimary == null || BBSPrimary.Length == 0)
                {
                    retval = NameDetail;
                }
                else
                {
                    retval = Callsign + '@' + (BBSPrimaryActive ? BBSPrimary : BBSSecondary) + ".ampr.org";
                }
                return retval;
            }
        }

        public override string ToString()
        {
            return Callsign;
        }

        int IComparable.CompareTo(object obj)
        {
            return this.ToString().CompareTo(obj.ToString());
        }
    }
}

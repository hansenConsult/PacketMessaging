//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Serialization;
using Windows.Storage;
using MetroLog;
using System.Threading.Tasks;
using System.Collections.ObjectModel;

// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// Partially true
// 

namespace PacketMessaging.Models
{
	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
	//[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
	public class DistributionListArray
	{
		private static ILogger log = LogManagerFactory.DefaultLogManager.GetLogger<DistributionListArray>();

		private const string distributionListsFileName = "DistributionLists.xml";

		private DistributionList[] _distributionListArrayField;

		private static volatile DistributionListArray _instance;
		private static object _syncRoot = new Object();


		private DistributionListArray()
		{
			_distributionListArrayField = new DistributionList[0];
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute("DistributionList", IsNullable = false)]
		public DistributionList[] ArrayOfDistributionLists
		{
			get => _distributionListArrayField;
			set => _distributionListArrayField = value;
		}

		public static DistributionListArray Instance
		{
			get
			{
				if (_instance == null)
				{
					lock (_syncRoot)
					{
						if (_instance == null)
							_instance = new DistributionListArray();
					}
				}
				return _instance;
			}
		}

		public List<string> GetDistributionListNames(string partialName)
		{
			if (ArrayOfDistributionLists == null || ArrayOfDistributionLists.Length == 0)
				return null;

			List<string> matches = new List<string>();

			foreach (DistributionList item in ArrayOfDistributionLists)
			{
				if (item.DistributionListName.ToUpper().StartsWith(partialName.ToUpper()))
				{
					matches.Add(item.DistributionListName);
				}
			}
			return matches;
		}

		public string[] GetDistributionListItems(string name)
		{
			string[] items = null;
			foreach (DistributionList list in ArrayOfDistributionLists)
			{
				if (list.DistributionListName == name)
				{
					items = list.DistributionListItems.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
					break;
				}
			}
			return items;
		}

		public ObservableCollection<string> GetDistributionLists()
		{
			ObservableCollection<string> distributionLists = new ObservableCollection<string>();

			foreach (DistributionList list in ArrayOfDistributionLists)
			{
				distributionLists.Add(list.DistributionListName);
			}
			return distributionLists;

		}

		public async Task OpenAsync()
		{
			StorageFolder localFolder = ApplicationData.Current.LocalFolder;

			StorageFile file = null;
			try
			{
				var storageItem = await localFolder.TryGetItemAsync(distributionListsFileName);
				if (storageItem == null)
					return;

				file = await localFolder.GetFileAsync(distributionListsFileName);
				using (FileStream reader = new FileStream(file.Path, FileMode.Open))
				{
					if (ArrayOfDistributionLists == null)
					{
						ArrayOfDistributionLists = new DistributionList[0];
					}


					XmlSerializer serializer = new XmlSerializer(typeof(DistributionList[]));
					ArrayOfDistributionLists = (DistributionList[])serializer.Deserialize(reader);
				}
			}
			catch (FileNotFoundException e)
			{
				log.Error($"Open Distribution List file failed: {e.Message}");
			}

			catch (Exception e)
			{
				log.Error($"Error opening file {file?.Path + distributionListsFileName}, {e}");
			}
		}

		public async Task SaveAsync()
		{
			if (ArrayOfDistributionLists == null || ArrayOfDistributionLists.Length == 0)
				return;

			StorageFolder localFolder = ApplicationData.Current.LocalFolder;
			try
			{
				StorageFile file = await localFolder.CreateFileAsync(distributionListsFileName, CreationCollisionOption.ReplaceExisting);
				using (StreamWriter writer = new StreamWriter(new FileStream(file.Path, FileMode.OpenOrCreate)))
				{
					XmlSerializer serializer = new XmlSerializer(typeof(DistributionList[]));
					serializer.Serialize(writer, ArrayOfDistributionLists);
				}
			}
			catch (Exception e)
			{
				log.Error($"Error saving {distributionListsFileName}, {e}");
			}
		}

	}

	/// <remarks/>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
	public partial class DistributionList
	{
		private string _nameField;

		private string _distributionListItemsField;

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string DistributionListName
		{
			get => _nameField;
			set => _nameField = value;
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string DistributionListItems
		{
			get => _distributionListItemsField;
			set => _distributionListItemsField = value;
		}
	}

}